<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:text="clr-namespace:BuildNotifications.Resources.Text"
                    xmlns:options="clr-namespace:BuildNotifications.ViewModel.Settings.Options"
                    xmlns:settings="clr-namespace:BuildNotifications.Resources.Settings"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:icons="clr-namespace:BuildNotifications.Resources.Icons"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:pluginOptions="clr-namespace:BuildNotifications.ViewModel.Settings.Options.PluginOptions"
                    xmlns:views="clr-namespace:BuildNotifications.Views"
                    xmlns:converters="clr-namespace:BuildNotifications.ViewModel.Utils.Converters"
                    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../../Resources/Icons/IconButtonStyles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate x:Key="BooleanOptionTemplate" DataType="{x:Type options:BooleanOptionViewModel}">
        <CheckBox IsChecked="{Binding Value, Mode=TwoWay}"
                  Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}"
                  Margin="{StaticResource BlockHalfYOnlyMargin}">
            <TextBlock
                Text="{Binding DisplayName}"
                Foreground="{DynamicResource Background3}" />
        </CheckBox>
    </DataTemplate>

    <DataTemplate x:Key="NumberOptionTemplate" DataType="{x:Type options:NumberOptionViewModel}">
        <text:DecoratedTextBox Text="{Binding Value, Mode=TwoWay}" IsEnabled="{Binding IsEnabled}"
                               Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}"
                               Label="{Binding DisplayName}"
                               Margin="{StaticResource BlockYOnlyMargin}" />
    </DataTemplate>

    <DataTemplate x:Key="TextOptionTemplate" DataType="{x:Type options:TextOptionViewModel}">
        <text:DecoratedTextBox Text="{Binding Value, Mode=TwoWay}" IsEnabled="{Binding IsEnabled}"
                               Label="{Binding DisplayName}" ToolTip="{Binding Description}"
                               Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}"
                               Margin="{StaticResource BlockYOnlyMargin}" />
    </DataTemplate>

    <DataTemplate x:Key="StringCollectionOptionTemplate"
                  DataType="{x:Type options:StringCollectionOptionViewModel}">
        <DockPanel Margin="{StaticResource BlockYOnlyMargin}" x:Name="DockPanel"
                   ToolTip="{Binding Description}"
                   Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}">
            <Grid DockPanel.Dock="Top">
                <DockPanel>
                    <Rectangle Height="{StaticResource BlockDouble}"
                               Fill="{DynamicResource Background1}"
                               DockPanel.Dock="Top" />
                    <Rectangle Height="{StaticResource BlockQuarter}"
                               VerticalAlignment="Bottom" DockPanel.Dock="Top"
                               Fill="{DynamicResource Blue}" />
                </DockPanel>
                <DockPanel VerticalAlignment="Center">

                    <TextBlock
                        Text="{Binding DisplayName, Converter={x:Static text:StringKeyToLocalizedTextConverter.Instance}}"
                        Foreground="{DynamicResource Foreground1HalfTransparency}" FontSize="14" />
                </DockPanel>

            </Grid>
            <DockPanel DockPanel.Dock="Left" VerticalAlignment="Top">
                <DockPanel DockPanel.Dock="Bottom">
                    <icons:IconButton Icon="Plus" Command="{Binding AddNewItemCommand}"
                                      x:Name="AddButton"
                                      Foreground="{DynamicResource Background2}"
                                      DockPanel.Dock="Left"
                                      Background="{DynamicResource Background1}"
                                      Height="{StaticResource BlockThreeQuarters}"
                                      IconSize="{StaticResource BlockThreeQuarters}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <icons:ButtonInvokedAnimation />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </icons:IconButton>
                    <DockPanel Visibility="Collapsed"
                               x:Name="InfoDockPanel">
                        <icons:IconBatch Type="Arrow" Width="{StaticResource Block}"
                                         Height="{StaticResource Block}"
                                         DockPanel.Dock="Left"
                                         Foreground="{DynamicResource Foreground1}"
                                         Margin="{StaticResource BlockQuarterThickness}" />
                        <TextBlock Text="Click here to add a new item"
                                   Foreground="{DynamicResource Foreground1}" />
                    </DockPanel>
                </DockPanel>
                <ItemsControl ItemsSource="{Binding Values}" x:Name="ListBox">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <DockPanel>
                                <icons:IconButton Icon="Minus"
                                                  Margin="{StaticResource BlockHalfXOnlyMargin}"
                                                  Command="{Binding DataContext.RemoveItemCommand, ElementName=DockPanel}"
                                                  CommandParameter="{Binding Value}"
                                                  x:Name="RemoveButton"
                                                  Foreground="{DynamicResource Background3}"
                                                  DockPanel.Dock="Right"
                                                  Height="{StaticResource BlockThreeQuarters}"
                                                  IconSize="{StaticResource BlockThreeQuarters}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Click">
                                            <icons:ButtonInvokedAnimation />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </icons:IconButton>
                                <ContentPresenter Content="{Binding}"
                                                  ContentTemplateSelector="{x:Static settings:OptionTemplateSelector.Instance}" />
                            </DockPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </DockPanel>
        </DockPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Values.Count}" Value="0">
                <Setter TargetName="InfoDockPanel" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <DataTemplate x:Key="PluginEncryptedTextOptionTemplate"
                  DataType="{x:Type pluginOptions:PluginEncryptedTextOptionViewModel}">
        <Grid Margin="{StaticResource BlockYOnlyMargin}" IsEnabled="{Binding IsEnabled}"
              ToolTip="{Binding Description}"
              Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}">
            <PasswordBox CaretBrush="{DynamicResource Foreground1}"
                         Foreground="{DynamicResource Foreground1}"
                         Background="Transparent" BorderThickness="0"
                         settings:PasswordHelper.Attach="True"
                         settings:PasswordHelper.Password="{Binding RawValue,Mode=TwoWay}" />

            <Border BorderThickness="0,0,0,1" BorderBrush="{DynamicResource Background3}"
                    SnapsToDevicePixels="True" />
            <TextBlock
                Text="{Binding DisplayName}"
                Foreground="{DynamicResource Background3}"
                Margin="{StaticResource BlockHalfXOnlyMargin}"
                Style="{StaticResource TextBoxLabelStyle}" HorizontalAlignment="Right"
                VerticalAlignment="Center" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="PluginDisplayOptionTemplate"
                  DataType="{x:Type pluginOptions:PluginDisplayOptionViewModel}">
        <DockPanel Margin="{StaticResource BlockYOnlyMargin}" x:Name="DockPanel"
                   ToolTip="{Binding Description}"
                   Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}">
            <Grid DockPanel.Dock="Top">
                <DockPanel>
                    <Rectangle Height="{StaticResource BlockDouble}"
                               Fill="{DynamicResource Background1}"
                               DockPanel.Dock="Top" />
                    <Rectangle Height="{StaticResource BlockQuarter}"
                               VerticalAlignment="Bottom" DockPanel.Dock="Top"
                               Fill="{DynamicResource Blue}" />
                </DockPanel>
                <DockPanel VerticalAlignment="Center">

                    <TextBlock
                        Text="{Binding DisplayName, Converter={x:Static text:StringKeyToLocalizedTextConverter.Instance}}"
                        Foreground="{DynamicResource Foreground1HalfTransparency}" FontSize="14" />
                </DockPanel>

            </Grid>
            <TextBlock Text="{Binding Value}" ToolTip="{Binding Description}"
                       Foreground="{DynamicResource Foreground1}"
                       Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}" />

        </DockPanel>
    </DataTemplate>


    <DataTemplate x:Key="PluginCommandOptionTemplate"
                  DataType="{x:Type pluginOptions:PluginCommandOptionViewModel}">
        <Grid
            Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}">
            <icons:IconButton Command="{Binding Command}"
                              Style="{StaticResource IconButtonWithDockedContent}"
                              Foreground="{DynamicResource Foreground1}"
                              Content="{Binding DisplayName}"
                              ToolTip="{Binding Description}" />

            <Viewbox DockPanel.Dock="Right" Width="{StaticResource BlockTriple}"
                     Height="{StaticResource Block}"
                     HorizontalAlignment="Center" VerticalAlignment="Center">
                <views:BusyIndicator IsBusy="{Binding Command.Execution.IsNotCompleted}" />
            </Viewbox>
        </Grid>
    </DataTemplate>

    <!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
    <!-- ListOptionViewModel<T> not supported as a DesignTimeDataContext in XAML because it is a generic type :( -->
    <DataTemplate x:Key="ListOptionTemplate">
        <StackPanel Orientation="Vertical" ToolTip="{Binding Description}"
                    IsEnabled="{Binding IsEnabled}"
                    Margin="{StaticResource BlockHalfYOnlyMargin}"
                    Visibility="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}">

            <TextBlock
                Text="{Binding DisplayName, Converter={x:Static text:StringKeyToLocalizedTextConverter.Instance}}"
                FontSize="{StaticResource Block}"
                Foreground="{DynamicResource Foreground1HalfTransparency}" />


            <Grid>
                <settings:DecoratedComboBox ItemsSource="{Binding AvailableValues}"
                                            SelectedItem="{Binding SelectedValue, Mode=TwoWay}"
                                            Margin="{StaticResource BlockQuarterYOnlyMargin}">
                    <settings:DecoratedComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding DisplayName}" />
                        </DataTemplate>
                    </settings:DecoratedComboBox.ItemTemplate>
                </settings:DecoratedComboBox>

                <Viewbox DockPanel.Dock="Right" Width="{StaticResource BlockTriple}"
                         Height="{StaticResource Block}"
                         HorizontalAlignment="Center" VerticalAlignment="Center">
                    <views:BusyIndicator IsBusy="{Binding IsLoading}" />
                </Viewbox>
            </Grid>

        </StackPanel>
    </DataTemplate>
    <!-- ReSharper restore Xaml.BindingWithContextNotResolved -->
</ResourceDictionary>